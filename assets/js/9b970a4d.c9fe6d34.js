"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[2475],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,d=c["".concat(s,".").concat(m)]||c[m]||g[m]||o;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[c]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9404:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=n(7462),i=(n(7294),n(4137));const o={id:"getting-started-mobile-required-ui",title:"Required UI for Mobile Integration",slug:"getting-started-mobile-required-ui"},l="User Interface requirements",a={unversionedId:"getting-started/engineers/getting-started-mobile-required-ui",id:"getting-started/engineers/getting-started-mobile-required-ui",title:"Required UI for Mobile Integration",description:"Currently Nimbus provides no user-interface components of its own, though provides API to connect to existing settings screens.",source:"@site/docs/getting-started/engineers/mobile-ui-integration.md",sourceDirName:"getting-started/engineers",slug:"/getting-started/engineers/getting-started-mobile-required-ui",permalink:"/getting-started/engineers/getting-started-mobile-required-ui",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/getting-started/engineers/mobile-ui-integration.md",tags:[],version:"current",frontMatter:{id:"getting-started-mobile-required-ui",title:"Required UI for Mobile Integration",slug:"getting-started-mobile-required-ui"},sidebar:"sidebar",previous:{title:"Desktop Migration Guide (JS)",permalink:"/desktop-migration-guide"},next:{title:"Experiment Owners",permalink:"/for-product"}},s={},p=[{value:"Global opt-out/opt-in for experiments",id:"global-opt-outopt-in-for-experiments",level:2},{value:"Resetting telemetry identifiers",id:"resetting-telemetry-identifiers",level:2},{value:"QA tooling",id:"qa-tooling",level:2},{value:"Preview Collection",id:"preview-collection",level:3},{value:"Manual opt-in of experiments",id:"manual-opt-in-of-experiments",level:3}],u={toc:p},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"user-interface-requirements"},"User Interface requirements"),(0,i.kt)("p",null,"Currently Nimbus provides no user-interface components of its own, though provides API to connect to existing settings screens."),(0,i.kt)("h2",{id:"global-opt-outopt-in-for-experiments"},"Global opt-out/opt-in for experiments"),(0,i.kt)("p",null,"The settings page should include a ",(0,i.kt)("inlineCode",{parentName:"p"},"Studies")," toggle, which allows users to opt-in or opt-out of experiments. The example from Firefox for iOS is shown:"),(0,i.kt)("img",{src:"/img/firefox-ios/studies-toggle.png",width:"300px"}),(0,i.kt)("p",null,"Toggling the ",(0,i.kt)("inlineCode",{parentName:"p"},"Studies")," flag should set the ",(0,i.kt)("inlineCode",{parentName:"p"},"Nimbus")," value for ",(0,i.kt)("inlineCode",{parentName:"p"},"globalUserParticipation"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"nimbus.globalUserParticipation = flag\n")),(0,i.kt)("h2",{id:"resetting-telemetry-identifiers"},"Resetting telemetry identifiers"),(0,i.kt)("p",null,"During experiment enrollment, telemetry is generated which can connect the user to the experiment enrollment."),(0,i.kt)("p",null,"When the user opts-in or opts-out of telemetry collection, the toggle should call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"nimbus.resetTelemetryIdentifiers()\n")),(0,i.kt)("p",null,"This disqualifies existing enrollments. and breaks any connection with experiment enrollment and the enrollment telemetry."),(0,i.kt)("h2",{id:"qa-tooling"},"QA tooling"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The following are nice-to-haves, obviated by the use of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mozilla/application-services/tree/main/components/support/nimbus-cli"},(0,i.kt)("inlineCode",{parentName:"a"},"nimbus-cli")),".")),(0,i.kt)("h3",{id:"preview-collection"},"Preview Collection"),(0,i.kt)("p",null,"To allow testing of experiments before they are published, the client should allow configuring the Nimbus startup to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"preview-collection"),"."),(0,i.kt)("img",{src:"/img/fenix/preview-collection.png",width:"300px"}),(0,i.kt)("p",null,"The above shows a non-user visible settings screen in Fenix. The toggle sets a ",(0,i.kt)("inlineCode",{parentName:"p"},"Defaults"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"SharedPreferences")," flag which is ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/engineers/getting-started-for-android-engineers#using-the-experiments-preview-collection"},"read at startup to configure ",(0,i.kt)("inlineCode",{parentName:"a"},"Nimbus")," startup"),"."),(0,i.kt)("p",null,"The preview collection is loaded on the next restart, and available to the app on the restart after that."),(0,i.kt)("h3",{id:"manual-opt-in-of-experiments"},"Manual opt-in of experiments"),(0,i.kt)("p",null,"To allow the manual opt-in of a particular branch, the app must provide a screen to list all available experiments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val experiments: List<AvailableExperiment> = nimbus.getAvailableExperiments()\n")),(0,i.kt)("img",{src:"/img/fenix/experiments-screen.png",width:"300px"}),(0,i.kt)("img",{src:"/img/fenix/experiments-screen-branches.png",width:"300px"}),(0,i.kt)("p",null,"To get the list of branches from an available experiment; you can get the branch slug that the client is enrolled in with ",(0,i.kt)("inlineCode",{parentName:"p"},"getExperimentBranch"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val branches = experiment.branches\nval branchSlugs: List<String> = branches.map { it.slug }\nval enrolledBranchSlug = nimbus.getExperimentBranch(experiment.slug)\n")),(0,i.kt)("p",null,"You can opt-in and out of a given experiment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// opt in to a particular branch\nval newBranchSlug = branchSlugs.get(0)\nif (enrolledBranchSlug != newBranchSlug) {\n    nimbus.optIn(experiment.slug, newBranchSlug)\n} else {\n    nimbus.optOut(experiment.slug)\n}\n")))}g.isMDXComponent=!0}}]);